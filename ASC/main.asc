application.onAppStart = function() {
	now_date = new Date();
	
	this.kicked = new Array();
	this.banned = new Array();
	this.users = new Array();
	
	this.sbanned = false;
	this.interval = undefined;
	this.timeout = 3600000; // one hour unban
	this.nextId = 100;
	this.history = "<font color='#990000'>(" + now_date + ") Application Started</font>";
	
	this.users_so = SharedObject.get('users_so', false);
};

application.onConnect = function(client, name, money, purpose) {
	if(this.banned[name] === name) {
		this.rejectConnection(client);
		return;
	}
	
	if(name == 'guest') {
		client.name = 'guest' + this.nextId;
		money = 0;
		this.nextId++;
	} else {
		client.name = name;
	}

	client.id = this.nextId;
	this.kicked[client.id] = client;
	this.users[client.id] = name;
	
	if(purpose != 'record') {
		var PeopleObj = new Object();
		
		PeopleObj.name = client.name;
		PeopleObj.money = money;
		PeopleObj.status = 'offline';
		PeopleObj.status = 'online';
		PeopleObj.id = client.id;
		
		this.users_so.setProperty(PeopleObj.id, PeopleObj);
	}

	this.nextId++;
	this.acceptConnection(client);

	if(client.name != 'administrator') {
		now_date = new Date();
		this.history += '<br>(' + now_date + ') ' + client.name + ' joined the chat.';
	}
	
	client.call('setHistory', null, this.history);

	client.requestPrivateSrvr = function(username, pmode) {
		now_date = new Date();
		
		application.history += '<br>(' + now_date + ') ' + username + ' requested private chat, mode:' + pmode + '.';
		application.users_so.send('requestPrivate', username, pmode);
	};

	client.leavePrivateSrvr = function(username) {
		now_date = new Date();
		
		application.history += '<br>(' + now_date + ') ' + username + ' left private chat.';
		application.users_so.send('leavePrivate', username);
	};

	client.sendTip = function(ammount, from) {
		now_date = new Date();
		
		application.history += '<br>(' + now_date + ') ' + from + ' tipped the model with ' + ammount / 100 + '$. ';
		application.users_so.send('recieveTip', ammount, from);
	};

	client.msgFromClient = function(msg) {
		msg = '<b>' + client.name + '</b>!.!' + msg;
		arContents = new Array();
		arContents = msg.split('!.!');

		now_date = new Date();
		
		application.history += '<br>(' + now_date + ') ' + arContents[0] + ':' + arContents[2];
		application.users_so.send('msgFromSrvr', msg);
	};

	client.changeStatus = function(status) {
		PeopleObj.status = status;
		application.users_so.setProperty(PeopleObj.id, PeopleObj);
	};
	
	client.kick = function(id) {
		application.disconnect(application.kicked[id]);
	};
	
	client.ban = function(id) {
		if(application.sbanned === false) {
			application.sbanned = true;
			application.interval = setInterval(application, 'updateBanned', application.timeout);
		}
		
		application.banned[application.users[id]] = application.users[id];
		application.kicked[id].call('onBan', null);
	};
};

application.onDisconnect = function(client) {
	try {
		var obj = this.users_so.getProperty(client.id);
		
		if(obj.name != 'administrator') {
			now_date = new Date();
			
			this.history += '<br>(' + now_date + ') ' + obj.name + ' left the chat.';
			this.users_so.setProperty(client.id, null);
		}
	} catch(e) {
		
	}
};

application.updateBanned = function() {
	this.sbanned = false;
	this.banned = new Array();
	clearInterval(this.interval);
};